name: "CodeQL"

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    # Runs at 02:00 UTC every day
    - cron: '0 2 * * *'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: go
          build-mode: autobuild
        # CodeQL supports the following values keywords for 'language':
        # 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # Use our custom configuration with flash-flags specific security queries
        config-file: ./.github/codeql/codeql-config.yml
        # Additional security and quality queries
        queries: +security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    # Additional security validation step that runs our fuzz tests
    # This ensures CodeQL analysis includes coverage of our security hardening
    - name: Run Security Fuzz Tests (for CodeQL context)
      if: matrix.language == 'go'
      run: |
        echo "Running flash-flags security fuzz tests to provide CodeQL with execution context..."
        # Run each fuzz test briefly to generate execution paths for CodeQL
        go test -fuzz=FuzzParse -fuzztime=10s . || echo "FuzzParse completed"
        go test -fuzz=FuzzParseStringSlice -fuzztime=10s . || echo "FuzzParseStringSlice completed"
        go test -fuzz=FuzzLoadConfig -fuzztime=10s . || echo "FuzzLoadConfig completed"
        go test -fuzz=FuzzEnvironmentVariables -fuzztime=10s . || echo "FuzzEnvironmentVariables completed"
        go test -fuzz=FuzzFlagValidation -fuzztime=10s . || echo "FuzzFlagValidation completed"
        echo "Security fuzz tests completed - CodeQL has execution context for security paths"

    # Run our security benchmarks to ensure performance is maintained
    - name: Security Benchmarks
      if: matrix.language == 'go'
      run: |
        echo "Running security benchmarks to validate performance..."
        go test -bench=BenchmarkParse -run=^$ .
        go test -bench=BenchmarkSecurityOverhead -run=^$ .
        echo "Security benchmarks completed successfully"